import { calculateBusinessDate } from './src/services/date.service';
import { toZonedTime, fromZonedTime } from 'date-fns-tz';

const TIMEZONE = 'America/Bogota';

interface TestCase {
  name: string;
  startDate: string; // UTC
  days?: number;
  hours?: number;
  expectedDescription: string;
}

const testCases: TestCase[] = [
  {
    name: "Ejemplo 1: Viernes 5:00 PM + 1 hora",
    startDate: "2025-01-17T22:00:00.000Z", // Viernes 5:00 PM Colombia
    hours: 1,
    expectedDescription: "Lunes 9:00 AM Colombia (14:00 UTC)"
  },
  {
    name: "Ejemplo 2: S√°bado 2:00 PM + 1 hora", 
    startDate: "2025-01-18T19:00:00.000Z", // S√°bado 2:00 PM Colombia
    hours: 1,
    expectedDescription: "Lunes 9:00 AM Colombia (14:00 UTC)"
  },
  {
    name: "Ejemplo 3: Martes 3:00 PM + 1 d√≠a + 3 horas",
    startDate: "2025-01-14T20:00:00.000Z", // Martes 3:00 PM Colombia
    days: 1,
    hours: 3,
    expectedDescription: "Jueves 10:00 AM Colombia (15:00 UTC)"
  },
  {
    name: "Ejemplo 4: Domingo 6:00 PM + 1 d√≠a",
    startDate: "2025-01-19T23:00:00.000Z", // Domingo 6:00 PM Colombia
    days: 1,
    expectedDescription: "Martes 8:00 AM Colombia (13:00 UTC)"
  },
  {
    name: "Ejemplo 5: D√≠a laboral 8:00 AM + 8 horas",
    startDate: "2025-01-15T13:00:00.000Z", // Mi√©rcoles 8:00 AM Colombia
    hours: 8,
    expectedDescription: "Mismo d√≠a 5:00 PM Colombia (22:00 UTC)"
  },
  {
    name: "Ejemplo 6: D√≠a laboral 8:00 AM + 1 d√≠a",
    startDate: "2025-01-15T13:00:00.000Z", // Mi√©rcoles 8:00 AM Colombia
    days: 1,
    expectedDescription: "Jueves 8:00 AM Colombia (13:00 UTC)"
  },
  {
    name: "Ejemplo 7: D√≠a laboral 12:30 PM + 1 d√≠a",
    startDate: "2025-01-15T17:30:00.000Z", // Mi√©rcoles 12:30 PM Colombia
    days: 1,
    expectedDescription: "Jueves 1:30 PM Colombia (18:30 UTC)"
  },
  {
    name: "Ejemplo 8: D√≠a laboral 11:30 AM + 3 horas",
    startDate: "2025-01-15T16:30:00.000Z", // Mi√©rcoles 11:30 AM Colombia
    hours: 3,
    expectedDescription: "Mismo d√≠a 3:30 PM Colombia (20:30 UTC)"
  }
];

async function runTests() {
  console.log('üß™ Ejecutando pruebas de ejemplos de la especificaci√≥n...\n');
  
  for (const testCase of testCases) {
    try {
      console.log(`üìã ${testCase.name}`);
      
      // Mostrar fecha de inicio en Colombia
      const startDateColombia = toZonedTime(new Date(testCase.startDate), TIMEZONE);
      console.log(`   Inicio: ${startDateColombia.toLocaleString('es-CO', { timeZone: TIMEZONE })} (Colombia)`);
      console.log(`   Par√°metros: days=${testCase.days || 0}, hours=${testCase.hours || 0}`);
      
      // Ejecutar c√°lculo
      const result = await calculateBusinessDate(testCase.days, testCase.hours, testCase.startDate);
      
      // Mostrar resultado en Colombia y UTC
      const resultDateColombia = toZonedTime(new Date(result), TIMEZONE);
      console.log(`   Resultado: ${resultDateColombia.toLocaleString('es-CO', { timeZone: TIMEZONE })} (Colombia)`);
      console.log(`   UTC: ${result}`);
      console.log(`   Esperado: ${testCase.expectedDescription}`);
      console.log('   ‚úÖ Ejecutado correctamente\n');
      
    } catch (error) {
      console.log(`   ‚ùå Error: ${error}`);
      console.log('');
    }
  }
  
  // Prueba adicional con festivos
  console.log('üéâ Prueba con festivos (Abril 2025):');
  try {
    const result = await calculateBusinessDate(5, 4, "2025-04-10T15:00:00.000Z");
    const resultDateColombia = toZonedTime(new Date(result), TIMEZONE);
    console.log(`   Resultado: ${resultDateColombia.toLocaleString('es-CO', { timeZone: TIMEZONE })} (Colombia)`);
    console.log(`   UTC: ${result}`);
    console.log('   ‚úÖ Prueba con festivos ejecutada\n');
  } catch (error) {
    console.log(`   ‚ùå Error en prueba con festivos: ${error}\n`);
  }
  
  // Prueba de rendimiento con grandes cantidades
  console.log('‚ö° Prueba de rendimiento (100 d√≠as + 50 horas):');
  try {
    const startTime = Date.now();
    const result = await calculateBusinessDate(100, 50, "2025-01-15T13:00:00.000Z");
    const endTime = Date.now();
    
    const resultDateColombia = toZonedTime(new Date(result), TIMEZONE);
    console.log(`   Resultado: ${resultDateColombia.toLocaleString('es-CO', { timeZone: TIMEZONE })} (Colombia)`);
    console.log(`   UTC: ${result}`);
    console.log(`   Tiempo de ejecuci√≥n: ${endTime - startTime}ms`);
    console.log('   ‚úÖ Prueba de rendimiento completada\n');
  } catch (error) {
    console.log(`   ‚ùå Error en prueba de rendimiento: ${error}\n`);
  }
}

runTests().catch(console.error);